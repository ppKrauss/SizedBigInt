
INSERT INTO sizednat.term (tgroup,term,info)
SELECT 'base_label', k, j->k
-- dataset generated by kx_baseLabel_generate.mjs
FROM (SELECT '
{
  "2": {
    "isAlias": "2h"
  },
  "4": {
    "isAlias": "4js"
  },
  "8": {
    "isAlias": "8js"
  },
  "16": {
    "isAlias": "16js"
  },
  "32": {
    "isAlias": "32hex"
  },
  "32js": {
    "isAlias": "32hex"
  },
  "64": {
    "isAlias": "64url"
  },
  "2h": {
    "base": 2,
    "alphabet": "01",
    "isDefault": true,
    "isHierar": true,
    "ref": "SizedNaturals",
    "bitsPerDigit": 1,
    "regex": "^([01]+)$",
    "case": false,
    "regex_b2": "^((?:[01]{1,1})*)([01]*)$",
    "label": "2h"
  },
  "4h": {
    "base": 4,
    "isHierar": true,
    "alphabet": "0123GH",
    "case": "upper",
    "regex": "^([0123]*)([GH])?$",
    "ref": "SizedNaturals",
    "bitsPerDigit": 2,
    "isDefault": false,
    "regex_b2": "^((?:[01]{2,2})*)([01]*)$",
    "label": "4h"
  },
  "8h": {
    "base": 8,
    "isHierar": true,
    "alphabet": "01234567GHJKLM",
    "regex": "^([0-7]*)([GHJ-M])?$",
    "ref": "SizedNaturals",
    "bitsPerDigit": 3,
    "case": "upper",
    "isDefault": false,
    "regex_b2": "^((?:[01]{3,3})*)([01]*)$",
    "label": "8h"
  },
  "16h": {
    "base": 16,
    "isHierar": true,
    "alphabet": "0123456789abcdefGHJKLMNPQRSTVZ",
    "regex": "^([0-9a-f]*)([GHJ-NP-TVZ])?$",
    "ref": "SizedNaturals",
    "bitsPerDigit": 4,
    "case": true,
    "isDefault": false,
    "regex_b2": "^((?:[01]{4,4})*)([01]*)$",
    "label": "16h"
  },
  "4js": {
    "alphabet": "0123",
    "isDefault": true,
    "ref": "ECMA-262",
    "base": 4,
    "bitsPerDigit": 2,
    "isHierar": false,
    "regex": "^([0123]+)$",
    "case": false,
    "regex_b2": "^((?:[01]{2,2})+)$",
    "label": "4js"
  },
  "8js": {
    "alphabet": "01234567",
    "isDefault": true,
    "ref": "ECMA-262",
    "base": 8,
    "bitsPerDigit": 3,
    "isHierar": false,
    "regex": "^([01234567]+)$",
    "case": false,
    "regex_b2": "^((?:[01]{3,3})+)$",
    "label": "8js"
  },
  "16js": {
    "alphabet": "0123456789abcdef",
    "isDefault": true,
    "ref": "ECMA-262",
    "base": 16,
    "bitsPerDigit": 4,
    "isHierar": false,
    "regex": "^([0123456789abcdef]+)$",
    "case": "lower",
    "regex_b2": "^((?:[01]{4,4})+)$",
    "label": "16js"
  },
  "32hex": {
    "alphabet": "0123456789abcdefghijklmnopqrstuv",
    "isDefault": true,
    "ref": "RFC 4648 sec. 7",
    "base": 32,
    "bitsPerDigit": 5,
    "isHierar": false,
    "regex": "^([0123456789abcdefghijklmnopqrstuv]+)$",
    "case": "lower",
    "regex_b2": "^((?:[01]{5,5})+)$",
    "label": "32hex"
  },
  "32nvu": {
    "alphabet": "0123456789BCDFGHJKLMNPQRSTUVWXYZ",
    "ref": "No-Vowels except U (near non-syllabic)",
    "base": 32,
    "bitsPerDigit": 5,
    "isHierar": false,
    "regex": "^([0123456789BCDFGHJKLMNPQRSTUVWXYZ]+)$",
    "case": "upper",
    "isDefault": false,
    "regex_b2": "^((?:[01]{5,5})+)$",
    "label": "32nvu"
  },
  "32rfc": {
    "alphabet": "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",
    "ref": "RFC 4648 sec. 6",
    "base": 32,
    "bitsPerDigit": 5,
    "isHierar": false,
    "regex": "^([ABCDEFGHIJKLMNOPQRSTUVWXYZ234567]+)$",
    "case": "upper",
    "isDefault": false,
    "regex_b2": "^((?:[01]{5,5})+)$",
    "label": "32rfc"
  },
  "32ghs": {
    "alphabet": "0123456789bcdefghjkmnpqrstuvwxyz",
    "ref": "Geohash, classical of 2008",
    "base": 32,
    "bitsPerDigit": 5,
    "isHierar": false,
    "regex": "^([0123456789bcdefghjkmnpqrstuvwxyz]+)$",
    "case": "lower",
    "isDefault": false,
    "regex_b2": "^((?:[01]{5,5})+)$",
    "label": "32ghs"
  },
  "64url": {
    "alphabet": "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",
    "isDefault": true,
    "ref": "RFC 4648 sec. 5",
    "base": 64,
    "bitsPerDigit": 6,
    "isHierar": false,
    "regex": "^([ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\\-_]+)$",
    "case": true,
    "regex_b2": "^((?:[01]{6,6})+)$",
    "label": "64url"
  }
}'::jsonb) t(j), LATERAL jsonb_object_keys(j) tt(k);


SELECT sizednat.term_kx_refresh();


--- FALTA DO $assert_sec$ ... 
